#define SCATTER_EVENTS 5 //Scatter events [0 1 2 3 4 5 6 7 8 9 10]
#define SAMPLES 1 //Samples [1 2 3 4 5 10 15 20 25 50 75 100]
#define TURBIDITY 1.05 //Turbidity [1.0 1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.1 1.11 1.12 1.13 1.14 1.15 1.2 1.25 1.3 1.35 1.4 1.45 1.5 1.55 1.6 1.65 1.7 1.75 1.8 1.85 1.9 1.95 2.0]
#define HUMIDITY 0.60 //Humidity [0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.10 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.20 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.30 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.40 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.50 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.60 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.70 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.80 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.90 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0]
#define GROUND_ALBEDO 0.25 //Albedo [0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.10 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.20 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.30 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.40 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.50 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.60 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.70 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.80 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.90 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0]
#define OZONE_STRENGTH 1.0 //Ozone strength [0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.10 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.20 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.30 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.40 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.50 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.60 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.70 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.80 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.90 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0 1.01 1.02 1.03 1.04 1.05 1.06 1.07 1.08 1.09 1.10 1.11 1.12 1.13 1.14 1.15 1.16 1.17 1.18 1.19 1.20 1.21 1.22 1.23 1.24 1.25 1.26 1.27 1.28 1.29 1.30 1.31 1.32 1.33 1.34 1.35 1.36 1.37 1.38 1.39 1.40 1.41 1.42 1.43 1.44 1.45 1.46 1.47 1.48 1.49 1.50 1.51 1.52 1.53 1.54 1.55 1.56 1.57 1.58 1.59 1.60 1.61 1.62 1.63 1.64 1.65 1.66 1.67 1.68 1.69 1.70 1.71 1.72 1.73 1.74 1.75 1.76 1.77 1.78 1.79 1.80 1.81 1.82 1.83 1.84 1.85 1.86 1.87 1.88 1.89 1.90 1.91 1.92 1.93 1.94 1.95 1.96 1.97 1.98 1.99 2.0]
#define MIE_SCATTERING_ALBEDO 0.99 //Scattering albedo [0.0 0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.10 0.11 0.12 0.13 0.14 0.15 0.16 0.17 0.18 0.19 0.20 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.30 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38 0.39 0.40 0.41 0.42 0.43 0.44 0.45 0.46 0.47 0.48 0.49 0.50 0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.60 0.61 0.62 0.63 0.64 0.65 0.66 0.67 0.68 0.69 0.70 0.71 0.72 0.73 0.74 0.75 0.76 0.77 0.78 0.79 0.80 0.81 0.82 0.83 0.84 0.85 0.86 0.87 0.88 0.89 0.90 0.91 0.92 0.93 0.94 0.95 0.96 0.97 0.98 0.99 1.0]

uniform vec3 sunPosition;
const float sunPathRotation = SUNROT;
const vec3 sunrd = normalize(mat3(gbufferModelViewInverse) * sunPosition);
//vec3 sunrd = normalize(vec3(1.0, -0.3, -10.0));

const float turbidity = TURBIDITY;
const float airNumberDensity = 2.5035422e25;
const float ozonePeakDensity = 5e-6;
const float ozonePeakAltitude = 35e3;
const float ozoneNumberDensity = airNumberDensity * exp(-ozonePeakAltitude / 8e3) * (134.628 / 48.0) * ozonePeakDensity;
const float ozoneUnitConversion = 1e-4;

float aerosol = 0.9;

float BetaM(float wl, float r) {
    float C = 0.005;  // Tunable coefficient based on particle concentration
    float b = mix(4.0, 1.5, smoothstep(0.1, 1.0, r)); // Transition exponent based on size
    return C * pow(r / wl, b);
}

float Air(in float wavelength) {
    return 1.0+8.06051E-5+2.480990E-2/(132.274-pow(wavelength,-2.0))+1.74557E-4/(39.32957-pow(wavelength,-2.0));
}

float rayleighCrossSection (float lambda, float nAir) {
    float lambdaMeter = lambda * 1e-9;
    float lambdaMicro = lambda * 1e-3;

    float rayleigh = (8.0 * pi * pi * pi * pow(nAir * nAir - 1.0, 2.0)) / (3.0 * pow(lambdaMeter, 4.0) * airNumberDensity);

    float waveNumber = 1.0 / lambdaMicro;

    float N2  = 1.034  + 3.17e-12 * waveNumber * waveNumber;
    float CO2 = 1.1364 + 2.53e-11 * waveNumber * waveNumber;

    float kingCorrectionFactor = (N2 + CO2) * 0.5;
    
    return rayleigh * kingCorrectionFactor;
}

float rayleighCrossSection (float wl) {
    return rayleighCrossSection(wl, 1.00029);
}

float BetaR(in float wavelength) {
    float nanometers = wavelength * 1e-9;

    float F_N2 = 1.034 + 3.17e-4 * (1.0 / pow(wavelength, 2.0));
    float F_O2 = 1.096 + 1.385e-3 * (1.0 / pow(wavelength, 2.0)) + 1.448e-4 * (1.0 / pow(wavelength, 4.0));
    float CCO2 = 0.045;
    float kingFactor = (78.084 * F_N2 + 20.946 * F_O2 + 0.934 + CCO2 * 1.15) / (78.084 + 20.946 + 0.934 + CCO2);
    float n = pow(Air(wavelength * 1e-3), 2.0) - 1.0;

    return ((8.0 * pow(pi, 3.0) * pow(n, 2.0)) / (3.0 * airNumberDensity * pow(nanometers, 4.0))) * kingFactor;
}

float rayleighCross (float wl, float n, float N) {
    float meters = wl * 1e-9;

    float num = 8.0 * pow(pi, 3.0) * pow((n * n - 1.0) / (n * n + 2.0), 2.0);
    float denom = 3.0 * pow(meters, 4.0) * N * N;

    return num / denom;
}

float N_N2 = 2.69e25;
float N_O2 = 2.45e25;
float N_CO2 = 3.3e24;

float ag = 6.022e23;

float BetaR2 (float wl) {
    float N2 = rayleighCross(wl, 1.000277, N_N2);
    float O2 = rayleighCross(wl, 1.000278, N_O2);
    float CO2 = rayleighCross(wl, 1.00045, N_CO2);

    return N2 + O2 + CO2;
}

const float ozoneCrossSection[441] = float[441](
    6.80778e-24,
    6.72106e-24,
    6.66971e-24,
    6.87827e-24,
    7.63950e-24,
    9.04948e-24,
    1.02622e-23,
    1.05505e-23,
    1.00303e-23,
    9.66106e-24,
    9.92189e-24,
    1.09556e-23,
    1.25580e-23,
    1.41026e-23,
    1.47637e-23,
    1.47593e-23,
    1.47278e-23,
    1.58624e-23,
    1.85887e-23,
    2.24518e-23,
    2.55393e-23,
    2.69799e-23,
    2.71700e-23,
    2.59416e-23,
    2.48635e-23,
    2.54214e-23,
    2.82383e-23,
    3.24288e-23,
    3.57929e-23,
    3.71260e-23,
    3.68606e-23,
    3.68453e-23,
    3.94202e-23,
    4.53838e-23,
    5.34144e-23,
    6.21470e-23,
    6.89342e-23,
    7.15131e-23,
    7.02279e-23,
    6.68451e-23,
    6.40985e-23,
    6.51215e-23,
    7.09484e-23,
    7.97582e-23,
    8.64796e-23,
    8.84751e-23,
    8.70576e-23,
    8.63018e-23,
    9.02596e-23,
    1.00978e-22,
    1.17515e-22,
    1.36812e-22,
    1.55564e-22,
    1.70593e-22,
    1.77413e-22,
    1.74113e-22,
    1.63969e-22,
    1.53825e-22,
    1.50061e-22,
    1.57091e-22,
    1.73006e-22,
    1.89872e-22,
    1.99180e-22,
    1.99402e-22,
    1.95992e-22,
    1.95885e-22,
    2.05664e-22,
    2.28073e-22,
    2.60481e-22,
    2.97688e-22,
    3.36293e-22,
    3.73195e-22,
    4.00920e-22,
    4.10428e-22,
    4.00191e-22,
    3.77591e-22,
    3.55367e-22,
    3.43550e-22,
    3.50045e-22,
    3.72443e-22,
    3.99079e-22,
    4.17388e-22,
    4.24576e-22,
    4.24739e-22,
    4.25983e-22,
    4.36706e-22,
    4.63007e-22,
    5.06215e-22,
    5.61756e-22,
    6.25345e-22,
    6.92671e-22,
    7.60101e-22,
    8.17582e-22,
    8.53087e-22,
    8.59583e-22,
    8.41161e-22,
    8.09704e-22,
    7.77762e-22,
    7.58661e-22,
    7.61105e-22,
    7.82768e-22,
    8.13525e-22,
    8.41416e-22,
    8.60281e-22,
    8.69574e-22,
    8.77739e-22,
    8.90289e-22,
    9.18185e-22,
    9.63101e-22,
    1.02541e-21,
    1.10497e-21,
    1.19583e-21,
    1.29472e-21,
    1.39640e-21,
    1.49041e-21,
    1.57014e-21,
    1.62239e-21,
    1.64414e-21,
    1.63511e-21,
    1.60943e-21,
    1.57830e-21,
    1.55493e-21,
    1.54503e-21,
    1.55300e-21,
    1.57805e-21,
    1.61238e-21,
    1.64978e-21,
    1.68423e-21,
    1.71542e-21,
    1.74504e-21,
    1.77787e-21,
    1.81470e-21,
    1.86234e-21,
    1.92426e-21,
    1.99836e-21,
    2.08321e-21,
    2.17570e-21,
    2.27551e-21,
    2.37767e-21,
    2.48026e-21,
    2.57787e-21,
    2.66735e-21,
    2.74553e-21,
    2.80416e-21,
    2.84156e-21,
    2.86077e-21,
    2.86533e-21,
    2.85907e-21,
    2.85266e-21,
    2.86095e-21,
    2.87845e-21,
    2.92588e-21,
    2.97008e-21,
    3.02468e-21,
    3.08141e-21,
    3.13490e-21,
    3.18141e-21,
    3.22207e-21,
    3.26213e-21,
    3.29445e-21,
    3.32516e-21,
    3.35579e-21,
    3.38847e-21,
    3.41886e-21,
    3.45674e-21,
    3.50070e-21,
    3.55041e-21,
    3.61007e-21,
    3.67904e-21,
    3.76616e-21,
    3.85792e-21,
    3.95625e-21,
    4.05115e-21,
    4.14698e-21,
    4.23308e-21,
    4.31213e-21,
    4.37493e-21,
    4.44152e-21,
    4.49554e-21,
    4.54212e-21,
    4.59922e-21,
    4.65627e-21,
    4.70549e-21,
    4.75188e-21,
    4.78362e-21,
    4.79933e-21,
    4.79812e-21,
    4.78287e-21,
    4.74991e-21,
    4.70931e-21,
    4.65747e-21,
    4.61692e-21,
    4.57024e-21,
    4.52700e-21,
    4.48817e-21,
    4.45931e-21,
    4.43458e-21,
    4.41148e-21,
    4.40927e-21,
    4.40508e-21,
    4.41249e-21,
    4.43419e-21,
    4.46445e-21,
    4.50560e-21,
    4.56963e-21,
    4.64735e-21,
    4.73301e-21,
    4.82020e-21,
    4.91050e-21,
    4.99163e-21,
    5.06017e-21,
    5.11838e-21,
    5.16436e-21,
    5.18613e-21,
    5.19008e-21,
    5.17248e-21,
    5.13839e-21,
    5.07516e-21,
    5.00213e-21,
    4.92632e-21,
    4.84196e-21,
    4.75813e-21,
    4.66949e-21,
    4.58682e-21,
    4.50504e-21,
    4.42659e-21,
    4.34938e-21,
    4.27621e-21,
    4.20827e-21,
    4.14570e-21,
    4.08986e-21,
    4.03221e-21,
    3.99139e-21,
    3.94294e-21,
    3.90294e-21,
    3.85486e-21,
    3.80352e-21,
    3.75269e-21,
    3.69724e-21,
    3.64581e-21,
    3.59756e-21,
    3.53981e-21,
    3.48189e-21,
    3.42639e-21,
    3.36507e-21,
    3.30716e-21,
    3.24798e-21,
    3.19212e-21,
    3.13235e-21,
    3.07385e-21,
    3.01187e-21,
    2.94933e-21,
    2.88675e-21,
    2.83154e-21,
    2.77990e-21,
    2.73430e-21,
    2.69151e-21,
    2.64926e-21,
    2.60694e-21,
    2.56838e-21,
    2.52929e-21,
    2.49407e-21,
    2.45557e-21,
    2.41588e-21,
    2.37737e-21,
    2.33497e-21,
    2.29460e-21,
    2.25198e-21,
    2.21134e-21,
    2.16653e-21,
    2.12952e-21,
    2.09231e-21,
    2.05119e-21,
    2.01199e-21,
    1.96873e-21,
    1.93030e-21,
    1.89301e-21,
    1.85458e-21,
    1.80984e-21,
    1.76722e-21,
    1.72459e-21,
    1.68500e-21,
    1.64647e-21,
    1.60911e-21,
    1.57194e-21,
    1.53783e-21,
    1.50400e-21,
    1.47295e-21,
    1.44342e-21,
    1.41512e-21,
    1.38809e-21,
    1.36429e-21,
    1.34049e-21,
    1.31934e-21,
    1.30100e-21,
    1.28154e-21,
    1.26035e-21,
    1.23594e-21,
    1.20922e-21,
    1.18024e-21,
    1.14995e-21,
    1.11892e-21,
    1.09140e-21,
    1.06392e-21,
    1.03712e-21,
    1.01065e-21,
    9.84534e-22,
    9.58011e-22,
    9.31230e-22,
    9.06905e-22,
    8.83424e-22,
    8.61809e-22,
    8.41371e-22,
    8.23199e-22,
    8.07479e-22,
    7.92359e-22,
    7.78960e-22,
    7.66918e-22,
    7.56724e-22,
    7.45938e-22,
    7.36321e-22,
    7.26761e-22,
    7.17708e-22,
    7.10170e-22,
    7.04603e-22,
    7.00521e-22,
    6.95807e-22,
    6.87983e-22,
    6.75690e-22,
    6.59167e-22,
    6.38658e-22,
    6.17401e-22,
    5.97986e-22,
    5.79980e-22,
    5.64879e-22,
    5.52304e-22,
    5.40930e-22,
    5.28950e-22,
    5.14905e-22,
    5.00676e-22,
    4.86900e-22,
    4.74324e-22,
    4.63744e-22,
    4.54117e-22,
    4.47413e-22,
    4.42084e-22,
    4.38598e-22,
    4.35751e-22,
    4.32496e-22,
    4.30002e-22,
    4.28472e-22,
    4.27365e-22,
    4.29043e-22,
    4.31385e-22,
    4.35345e-22,
    4.40512e-22,
    4.46268e-22,
    4.50925e-22,
    4.51983e-22,
    4.49671e-22,
    4.41359e-22,
    4.27561e-22,
    4.09127e-22,
    3.88901e-22,
    3.68851e-22,
    3.50462e-22,
    3.34368e-22,
    3.20386e-22,
    3.08569e-22,
    2.99026e-22,
    2.90708e-22,
    2.83838e-22,
    2.77892e-22,
    2.72682e-22,
    2.67864e-22,
    2.63381e-22,
    2.60147e-22,
    2.57597e-22,
    2.55903e-22,
    2.54995e-22,
    2.55263e-22,
    2.56910e-22,
    2.59848e-22,
    2.64943e-22,
    2.72251e-22,
    2.81519e-22,
    2.92565e-22,
    3.03612e-22,
    3.13434e-22,
    3.20710e-22,
    3.23925e-22,
    3.21425e-22,
    3.14522e-22,
    3.03211e-22,
    2.89017e-22,
    2.73981e-22,
    2.59406e-22,
    2.46085e-22,
    2.34234e-22,
    2.23936e-22,
    2.14826e-22,
    2.06425e-22,
    1.98427e-22,
    1.90789e-22,
    1.83692e-22,
    1.77111e-22,
    1.71523e-22,
    1.66604e-22,
    1.63367e-22,
    1.60371e-22,
    1.57834e-22,
    1.55432e-22,
    1.53961e-22,
    1.52632e-22,
    1.51695e-22,
    1.51650e-22,
    1.53341e-22,
    1.56550e-22,
    1.61557e-22,
    1.68582e-22,
    1.76205e-22,
    1.84627e-22,
    1.93246e-22,
    2.01741e-22,
    2.09583e-22,
    2.16778e-22,
    2.22566e-22,
    2.25770e-22,
    2.25611e-22,
    2.22491e-22,
    2.16317e-22,
    2.07365e-22,
    1.96101e-22,
    1.82575e-22,
    1.69093e-22,
    1.55152e-22,
    1.42655e-22,
    1.31245e-22,
    1.21519e-22,
    1.12924e-22,
    1.05472e-22
);

//x is extinction, y is scattering, z is anisotropy

const vec3 icymist[441] = vec3[441](
    vec3(0.0312053, 0.0311883, 0.684949),
    vec3(0.0311211, 0.0311042, 0.685641),
    vec3(0.0310524, 0.0310355, 0.68642),
    vec3(0.0310019, 0.030985, 0.687212),
    vec3(0.0309706, 0.0309537, 0.687967),
    vec3(0.030958, 0.0309411, 0.688645),
    vec3(0.0309625, 0.0309457, 0.689218),
    vec3(0.0309822, 0.0309653, 0.689669),
    vec3(0.0310142, 0.0309973, 0.689989),
    vec3(0.0310558, 0.0310389, 0.690174),
    vec3(0.0311046, 0.0310877, 0.690227),
    vec3(0.0311584, 0.0311415, 0.690147),
    vec3(0.0312156, 0.0311986, 0.689936),
    vec3(0.0312745, 0.0312575, 0.689593),
    vec3(0.0313327, 0.0313157, 0.689125),
    vec3(0.0313865, 0.0313694, 0.68856),
    vec3(0.0314313, 0.0314141, 0.687955),
    vec3(0.0314628, 0.0314456, 0.687387),
    vec3(0.0314792, 0.031462, 0.686935),
    vec3(0.0314817, 0.0314646, 0.686648),
    vec3(0.031474, 0.0314569, 0.686537),
    vec3(0.0314602, 0.0314431, 0.686588),
    vec3(0.0314444, 0.0314273, 0.686771),
    vec3(0.0314298, 0.0314126, 0.687054),
    vec3(0.0314187, 0.0314016, 0.687407),
    vec3(0.031413, 0.0313958, 0.6878),
    vec3(0.0314135, 0.0313964, 0.688212),
    vec3(0.0314209, 0.0314038, 0.688622),
    vec3(0.0314352, 0.0314181, 0.689014),
    vec3(0.0314563, 0.0314391, 0.689375),
    vec3(0.0314835, 0.0314663, 0.689693),
    vec3(0.0315161, 0.0314989, 0.68996),
    vec3(0.0315534, 0.0315362, 0.690172),
    vec3(0.0315944, 0.0315771, 0.690323),
    vec3(0.0316383, 0.031621, 0.69041),
    vec3(0.0316843, 0.0316671, 0.690431),
    vec3(0.0317316, 0.0317143, 0.690384),
    vec3(0.0317789, 0.0317616, 0.690271),
    vec3(0.0318248, 0.0318075, 0.690102),
    vec3(0.0318673, 0.0318499, 0.689893),
    vec3(0.0319045, 0.0318871, 0.689674),
    vec3(0.031935, 0.0319176, 0.689475),
    vec3(0.0319584, 0.031941, 0.689329),
    vec3(0.0319756, 0.0319582, 0.689253),
    vec3(0.031988, 0.0319706, 0.689256),
    vec3(0.0319973, 0.0319799, 0.689334),
    vec3(0.0320053, 0.0319878, 0.689479),
    vec3(0.0320133, 0.0319959, 0.68968),
    vec3(0.0320227, 0.0320052, 0.689924),
    vec3(0.0320343, 0.0320168, 0.6902),
    vec3(0.0320487, 0.0320313, 0.690497),
    vec3(0.0320665, 0.032049, 0.690806),
    vec3(0.0320879, 0.0320704, 0.691118),
    vec3(0.0321129, 0.0320954, 0.691424),
    vec3(0.0321416, 0.0321241, 0.691719),
    vec3(0.0321738, 0.0321563, 0.691996),
    vec3(0.0322092, 0.0321916, 0.69225),
    vec3(0.0322474, 0.0322299, 0.692478),
    vec3(0.0322882, 0.0322706, 0.692676),
    vec3(0.032331, 0.0323134, 0.692842),
    vec3(0.0323755, 0.0323578, 0.692972),
    vec3(0.0324211, 0.0324034, 0.693066),
    vec3(0.0324673, 0.0324496, 0.693123),
    vec3(0.0325134, 0.0324957, 0.693144),
    vec3(0.0325586, 0.0325409, 0.693134),
    vec3(0.0326021, 0.0325843, 0.693098),
    vec3(0.0326427, 0.0326249, 0.693049),
    vec3(0.0326798, 0.032662, 0.692999),
    vec3(0.0327129, 0.0326951, 0.692965),
    vec3(0.0327421, 0.0327243, 0.692958),
    vec3(0.0327678, 0.03275, 0.692988),
    vec3(0.0327909, 0.032773, 0.693058),
    vec3(0.0328122, 0.0327943, 0.693166),
    vec3(0.0328326, 0.0328147, 0.693311),
    vec3(0.0328527, 0.0328347, 0.693487),
    vec3(0.0328731, 0.0328552, 0.693689),
    vec3(0.0328944, 0.0328765, 0.693913),
    vec3(0.032917, 0.032899, 0.694154),
    vec3(0.0329412, 0.0329232, 0.694407),
    vec3(0.0329672, 0.0329493, 0.694668),
    vec3(0.0329953, 0.0329773, 0.69493),
    vec3(0.0330254, 0.0330074, 0.695191),
    vec3(0.0330575, 0.0330395, 0.695447),
    vec3(0.0330916, 0.0330735, 0.695695),
    vec3(0.0331276, 0.0331095, 0.695932),
    vec3(0.0331653, 0.0331473, 0.696156),
    vec3(0.0332047, 0.0331866, 0.696363),
    vec3(0.0332455, 0.0332274, 0.696552),
    vec3(0.0332874, 0.0332693, 0.696721),
    vec3(0.0333303, 0.0333121, 0.696869),
    vec3(0.0333738, 0.0333556, 0.696994),
    vec3(0.0334176, 0.0333993, 0.697096),
    vec3(0.0334613, 0.033443, 0.697176),
    vec3(0.0335045, 0.0334863, 0.697235),
    vec3(0.0335468, 0.0335286, 0.697275),
    vec3(0.0335878, 0.0335694, 0.6973),
    vec3(0.0336268, 0.0336084, 0.697316),
    vec3(0.0336635, 0.0336452, 0.697328),
    vec3(0.0336978, 0.0336794, 0.697344),
    vec3(0.0337295, 0.0337111, 0.697371),
    vec3(0.0337588, 0.0337404, 0.697414),
    vec3(0.0337862, 0.0337678, 0.697477),
    vec3(0.0338121, 0.0337936, 0.697562),
    vec3(0.0338369, 0.0338185, 0.697668),
    vec3(0.0338613, 0.0338428, 0.697794),
    vec3(0.0338854, 0.0338669, 0.697937),
    vec3(0.0339097, 0.0338912, 0.698094),
    vec3(0.0339342, 0.0339158, 0.698265),
    vec3(0.0339593, 0.0339408, 0.698446),
    vec3(0.0339851, 0.0339665, 0.698636),
    vec3(0.0340116, 0.0339931, 0.698833),
    vec3(0.0340391, 0.0340205, 0.699035),
    vec3(0.0340676, 0.0340491, 0.69924),
    vec3(0.0340973, 0.0340787, 0.699446),
    vec3(0.0341282, 0.0341096, 0.69965),
    vec3(0.0341601, 0.0341415, 0.69985),
    vec3(0.0341931, 0.0341745, 0.700045),
    vec3(0.0342271, 0.0342085, 0.700232),
    vec3(0.0342619, 0.0342433, 0.700411),
    vec3(0.0342975, 0.0342788, 0.700579),
    vec3(0.0343338, 0.0343151, 0.700737),
    vec3(0.0343706, 0.0343518, 0.700883),
    vec3(0.0344078, 0.034389, 0.701017),
    vec3(0.0344452, 0.0344265, 0.701137),
    vec3(0.0344828, 0.034464, 0.701243),
    vec3(0.0345203, 0.0345015, 0.701335),
    vec3(0.0345574, 0.0345386, 0.701412),
    vec3(0.034594, 0.0345751, 0.701475),
    vec3(0.0346297, 0.0346108, 0.701526),
    vec3(0.0346643, 0.0346454, 0.701566),
    vec3(0.0346975, 0.0346786, 0.701597),
    vec3(0.0347292, 0.0347103, 0.701623),
    vec3(0.0347592, 0.0347403, 0.701647),
    vec3(0.0347874, 0.0347685, 0.701672),
    vec3(0.034814, 0.034795, 0.701702),
    vec3(0.0348389, 0.03482, 0.701739),
    vec3(0.0348625, 0.0348435, 0.701786),
    vec3(0.0348851, 0.034866, 0.701843),
    vec3(0.0349067, 0.0348877, 0.701912),
    vec3(0.0349279, 0.0349089, 0.701992),
    vec3(0.0349488, 0.0349297, 0.702081),
    vec3(0.0349695, 0.0349505, 0.702179),
    vec3(0.0349903, 0.0349713, 0.702284),
    vec3(0.0350113, 0.0349922, 0.702395),
    vec3(0.0350324, 0.0350133, 0.70251),
    vec3(0.0350538, 0.0350347, 0.70263),
    vec3(0.0350755, 0.0350564, 0.702753),
    vec3(0.0350975, 0.0350784, 0.702878),
    vec3(0.0351199, 0.0351007, 0.703006),
    vec3(0.0351427, 0.0351236, 0.703136),
    vec3(0.0351661, 0.0351469, 0.703267),
    vec3(0.03519, 0.0351708, 0.703397),
    vec3(0.0352144, 0.0351953, 0.703527),
    vec3(0.0352395, 0.0352203, 0.703655),
    vec3(0.0352652, 0.035246, 0.70378),
    vec3(0.0352913, 0.0352721, 0.7039),
    vec3(0.035318, 0.0352987, 0.704015),
    vec3(0.0353449, 0.0353257, 0.704124),
    vec3(0.0353722, 0.0353529, 0.704226),
    vec3(0.0353996, 0.0353803, 0.70432),
    vec3(0.035427, 0.0354077, 0.704407),
    vec3(0.0354543, 0.035435, 0.704485),
    vec3(0.0354815, 0.0354621, 0.704556),
    vec3(0.0355084, 0.035489, 0.704619),
    vec3(0.0355349, 0.0355155, 0.704674),
    vec3(0.0355609, 0.0355415, 0.704721),
    vec3(0.0355864, 0.035567, 0.704761),
    vec3(0.0356111, 0.0355917, 0.704793),
    vec3(0.0356351, 0.0356157, 0.70482),
    vec3(0.0356581, 0.0356387, 0.704841),
    vec3(0.0356802, 0.0356607, 0.704857),
    vec3(0.0357011, 0.0356817, 0.70487),
    vec3(0.0357209, 0.0357014, 0.70488),
    vec3(0.0357394, 0.0357199, 0.70489),
    vec3(0.0357567, 0.0357373, 0.7049),
    vec3(0.0357729, 0.0357534, 0.704912),
    vec3(0.035788, 0.0357685, 0.704927),
    vec3(0.035802, 0.0357825, 0.704947),
    vec3(0.0358153, 0.0357958, 0.704971),
    vec3(0.0358278, 0.0358083, 0.705001),
    vec3(0.0358399, 0.0358203, 0.705036),
    vec3(0.0358515, 0.035832, 0.705077),
    vec3(0.035863, 0.0358434, 0.705124),
    vec3(0.0358743, 0.0358548, 0.705174),
    vec3(0.0358857, 0.0358661, 0.705229),
    vec3(0.0358971, 0.0358776, 0.705286),
    vec3(0.0359087, 0.0358891, 0.705346),
    vec3(0.0359203, 0.0359007, 0.705408),
    vec3(0.0359321, 0.0359125, 0.705471),
    vec3(0.0359441, 0.0359245, 0.705534),
    vec3(0.0359562, 0.0359366, 0.705598),
    vec3(0.0359684, 0.0359488, 0.705661),
    vec3(0.0359807, 0.0359611, 0.705725),
    vec3(0.0359932, 0.0359736, 0.705787),
    vec3(0.0360057, 0.0359861, 0.705849),
    vec3(0.0360185, 0.0359988, 0.70591),
    vec3(0.0360313, 0.0360117, 0.70597),
    vec3(0.0360443, 0.0360247, 0.706029),
    vec3(0.0360575, 0.0360379, 0.706085),
    vec3(0.0360709, 0.0360512, 0.706139),
    vec3(0.0360843, 0.0360647, 0.706191),
    vec3(0.036098, 0.0360783, 0.706239),
    vec3(0.0361117, 0.036092, 0.706284),
    vec3(0.0361254, 0.0361058, 0.706325),
    vec3(0.0361392, 0.0361195, 0.706361),
    vec3(0.0361529, 0.0361332, 0.706393),
    vec3(0.0361665, 0.0361468, 0.706419),
    vec3(0.0361799, 0.0361602, 0.70644),
    vec3(0.0361931, 0.0361733, 0.706456),
    vec3(0.0362058, 0.0361861, 0.706466),
    vec3(0.0362182, 0.0361984, 0.706471),
    vec3(0.03623, 0.0362102, 0.706471),
    vec3(0.0362412, 0.0362215, 0.706465),
    vec3(0.0362518, 0.0362321, 0.706455),
    vec3(0.0362617, 0.036242, 0.706441),
    vec3(0.0362709, 0.0362511, 0.706423),
    vec3(0.0362792, 0.0362594, 0.706402),
    vec3(0.0362867, 0.0362669, 0.706378),
    vec3(0.0362934, 0.0362736, 0.706352),
    vec3(0.0362992, 0.0362794, 0.706325),
    vec3(0.0363041, 0.0362843, 0.706297),
    vec3(0.0363082, 0.0362885, 0.706269),
    vec3(0.0363116, 0.0362918, 0.706242),
    vec3(0.0363142, 0.0362944, 0.706216),
    vec3(0.036316, 0.0362962, 0.706193),
    vec3(0.0363173, 0.0362975, 0.706171),
    vec3(0.036318, 0.0362982, 0.706152),
    vec3(0.0363182, 0.0362984, 0.706136),
    vec3(0.0363181, 0.0362983, 0.706123),
    vec3(0.0363176, 0.0362978, 0.706113),
    vec3(0.0363169, 0.0362971, 0.706107),
    vec3(0.0363159, 0.0362961, 0.706103),
    vec3(0.0363149, 0.0362951, 0.706102),
    vec3(0.0363137, 0.036294, 0.706103),
    vec3(0.0363126, 0.0362928, 0.706106),
    vec3(0.0363113, 0.0362916, 0.706111),
    vec3(0.0363101, 0.0362903, 0.706117),
    vec3(0.0363089, 0.0362891, 0.706125),
    vec3(0.0363077, 0.0362879, 0.706133),
    vec3(0.0363065, 0.0362867, 0.706142),
    vec3(0.0363053, 0.0362855, 0.70615),
    vec3(0.0363041, 0.0362843, 0.706159),
    vec3(0.0363029, 0.0362831, 0.706168),
    vec3(0.0363017, 0.0362819, 0.706177),
    vec3(0.0363004, 0.0362806, 0.706185),
    vec3(0.0362992, 0.0362794, 0.706193),
    vec3(0.0362979, 0.0362781, 0.706199),
    vec3(0.0362965, 0.0362768, 0.706206),
    vec3(0.0362952, 0.0362754, 0.706211),
    vec3(0.0362939, 0.0362741, 0.706216),
    vec3(0.0362925, 0.0362727, 0.706219),
    vec3(0.0362911, 0.0362713, 0.706221),
    vec3(0.0362897, 0.0362699, 0.706222),
    vec3(0.0362883, 0.0362685, 0.706221),
    vec3(0.0362869, 0.0362671, 0.706219),
    vec3(0.0362854, 0.0362656, 0.706214),
    vec3(0.0362839, 0.0362641, 0.706208),
    vec3(0.0362823, 0.0362625, 0.706199),
    vec3(0.0362806, 0.0362608, 0.706187),
    vec3(0.0362787, 0.036259, 0.706173),
    vec3(0.0362767, 0.036257, 0.706155),
    vec3(0.0362745, 0.0362548, 0.706135),
    vec3(0.0362721, 0.0362523, 0.706111),
    vec3(0.0362694, 0.0362496, 0.706084),
    vec3(0.0362663, 0.0362465, 0.706053),
    vec3(0.0362629, 0.0362431, 0.706019),
    vec3(0.036259, 0.0362392, 0.705981),
    vec3(0.0362547, 0.0362349, 0.70594),
    vec3(0.0362499, 0.0362301, 0.705896),
    vec3(0.0362445, 0.0362248, 0.705849),
    vec3(0.0362386, 0.0362189, 0.705798),
    vec3(0.0362321, 0.0362124, 0.705745),
    vec3(0.0362251, 0.0362053, 0.70569),
    vec3(0.0362174, 0.0361976, 0.705633),
    vec3(0.0362091, 0.0361893, 0.705574),
    vec3(0.0362002, 0.0361804, 0.705513),
    vec3(0.0361907, 0.036171, 0.705452),
    vec3(0.0361806, 0.0361609, 0.70539),
    vec3(0.03617, 0.0361503, 0.705327),
    vec3(0.0361588, 0.0361391, 0.705265),
    vec3(0.0361472, 0.0361275, 0.705203),
    vec3(0.0361351, 0.0361154, 0.705142),
    vec3(0.0361227, 0.036103, 0.705083),
    vec3(0.0361098, 0.0360902, 0.705024),
    vec3(0.0360967, 0.036077, 0.704967),
    vec3(0.0360833, 0.0360637, 0.704911),
    vec3(0.0360697, 0.0360501, 0.704857),
    vec3(0.036056, 0.0360363, 0.704805),
    vec3(0.036042, 0.0360224, 0.704755),
    vec3(0.036028, 0.0360084, 0.704706),
    vec3(0.0360139, 0.0359943, 0.704659),
    vec3(0.0359998, 0.0359802, 0.704613),
    vec3(0.0359856, 0.035966, 0.704569),
    vec3(0.0359714, 0.0359518, 0.704526),
    vec3(0.0359572, 0.0359377, 0.704485),
    vec3(0.035943, 0.0359235, 0.704444),
    vec3(0.0359288, 0.0359092, 0.704404),
    vec3(0.0359146, 0.035895, 0.704364),
    vec3(0.0359003, 0.0358808, 0.704325),
    vec3(0.0358861, 0.0358665, 0.704285),
    vec3(0.0358717, 0.0358522, 0.704246),
    vec3(0.0358574, 0.0358378, 0.704207),
    vec3(0.0358429, 0.0358234, 0.704168),
    vec3(0.0358284, 0.0358089, 0.704128),
    vec3(0.0358138, 0.0357943, 0.704088),
    vec3(0.0357991, 0.0357795, 0.704047),
    vec3(0.0357842, 0.0357647, 0.704006),
    vec3(0.0357693, 0.0357498, 0.703964),
    vec3(0.0357542, 0.0357347, 0.703922),
    vec3(0.0357391, 0.0357196, 0.703879),
    vec3(0.0357238, 0.0357043, 0.703836),
    vec3(0.0357083, 0.0356889, 0.703792),
    vec3(0.0356928, 0.0356734, 0.703748),
    vec3(0.0356772, 0.0356577, 0.703703),
    vec3(0.0356615, 0.035642, 0.703658),
    vec3(0.0356456, 0.0356262, 0.703612),
    vec3(0.0356297, 0.0356103, 0.703566),
    vec3(0.0356137, 0.0355943, 0.703519),
    vec3(0.0355976, 0.0355782, 0.703472),
    vec3(0.0355814, 0.0355621, 0.703425),
    vec3(0.0355652, 0.0355458, 0.703377),
    vec3(0.0355489, 0.0355295, 0.703328),
    vec3(0.0355325, 0.0355132, 0.703279),
    vec3(0.0355161, 0.0354967, 0.703229),
    vec3(0.0354996, 0.0354802, 0.703178),
    vec3(0.0354829, 0.0354636, 0.703127),
    vec3(0.0354662, 0.0354469, 0.703074),
    vec3(0.0354494, 0.03543, 0.703021),
    vec3(0.0354324, 0.0354131, 0.702966),
    vec3(0.0354152, 0.0353959, 0.70291),
    vec3(0.0353979, 0.0353786, 0.702853),
    vec3(0.0353804, 0.0353612, 0.702794),
    vec3(0.0353627, 0.0353435, 0.702734),
    vec3(0.0353448, 0.0353255, 0.702672),
    vec3(0.0353266, 0.0353073, 0.702609),
    vec3(0.0353081, 0.0352889, 0.702544),
    vec3(0.0352893, 0.0352701, 0.702477),
    vec3(0.0352702, 0.035251, 0.702409),
    vec3(0.0352508, 0.0352316, 0.702339),
    vec3(0.035231, 0.0352118, 0.702267),
    vec3(0.0352108, 0.0351916, 0.702194),
    vec3(0.0351903, 0.0351711, 0.70212),
    vec3(0.0351694, 0.0351502, 0.702043),
    vec3(0.035148, 0.0351289, 0.701966),
    vec3(0.0351263, 0.0351072, 0.701887),
    vec3(0.0351042, 0.0350851, 0.701807),
    vec3(0.0350817, 0.0350626, 0.701726),
    vec3(0.0350589, 0.0350398, 0.701644),
    vec3(0.0350357, 0.0350166, 0.701562),
    vec3(0.0350121, 0.034993, 0.701478),
    vec3(0.0349882, 0.0349691, 0.701395),
    vec3(0.034964, 0.034945, 0.701311),
    vec3(0.0349395, 0.0349205, 0.701227),
    vec3(0.0349148, 0.0348958, 0.701143),
    vec3(0.0348898, 0.0348708, 0.701059),
    vec3(0.0348646, 0.0348456, 0.700975),
    vec3(0.0348393, 0.0348203, 0.700892),
    vec3(0.0348137, 0.0347948, 0.700809),
    vec3(0.0347881, 0.0347691, 0.700727),
    vec3(0.0347624, 0.0347434, 0.700646),
    vec3(0.0347366, 0.0347176, 0.700565),
    vec3(0.0347107, 0.0346918, 0.700485),
    vec3(0.0346848, 0.0346659, 0.700406),
    vec3(0.0346589, 0.03464, 0.700328),
    vec3(0.034633, 0.0346141, 0.70025),
    vec3(0.0346071, 0.0345883, 0.700173),
    vec3(0.0345813, 0.0345625, 0.700098),
    vec3(0.0345555, 0.0345367, 0.700023),
    vec3(0.0345298, 0.034511, 0.699949),
    vec3(0.0345041, 0.0344853, 0.699875),
    vec3(0.0344785, 0.0344597, 0.699802),
    vec3(0.034453, 0.0344342, 0.69973),
    vec3(0.0344275, 0.0344087, 0.699659),
    vec3(0.0344021, 0.0343833, 0.699587),
    vec3(0.0343767, 0.034358, 0.699517),
    vec3(0.0343514, 0.0343327, 0.699446),
    vec3(0.0343261, 0.0343074, 0.699376),
    vec3(0.0343009, 0.0342822, 0.699306),
    vec3(0.0342757, 0.034257, 0.699236),
    vec3(0.0342505, 0.0342318, 0.699166),
    vec3(0.0342253, 0.0342066, 0.699096),
    vec3(0.0342001, 0.0341815, 0.699027),
    vec3(0.0341749, 0.0341563, 0.698956),
    vec3(0.0341497, 0.034131, 0.698886),
    vec3(0.0341244, 0.0341058, 0.698816),
    vec3(0.0340991, 0.0340805, 0.698745),
    vec3(0.0340737, 0.0340551, 0.698673),
    vec3(0.0340483, 0.0340297, 0.698602),
    vec3(0.0340228, 0.0340042, 0.69853),
    vec3(0.0339972, 0.0339786, 0.698457),
    vec3(0.0339715, 0.033953, 0.698385),
    vec3(0.0339457, 0.0339272, 0.698311),
    vec3(0.0339198, 0.0339013, 0.698237),
    vec3(0.0338939, 0.0338754, 0.698163),
    vec3(0.0338678, 0.0338493, 0.698088),
    vec3(0.0338416, 0.0338231, 0.698013),
    vec3(0.0338152, 0.0337968, 0.697937),
    vec3(0.0337888, 0.0337704, 0.69786),
    vec3(0.0337623, 0.0337439, 0.697783),
    vec3(0.0337356, 0.0337172, 0.697706),
    vec3(0.0337088, 0.0336904, 0.697627),
    vec3(0.0336819, 0.0336635, 0.697549),
    vec3(0.0336548, 0.0336365, 0.69747),
    vec3(0.0336277, 0.0336093, 0.69739),
    vec3(0.0336004, 0.033582, 0.69731),
    vec3(0.0335729, 0.0335546, 0.697229),
    vec3(0.0335454, 0.0335271, 0.697147),
    vec3(0.0335177, 0.0334995, 0.697065),
    vec3(0.0334899, 0.0334717, 0.696983),
    vec3(0.033462, 0.0334438, 0.6969),
    vec3(0.033434, 0.0334157, 0.696817),
    vec3(0.0334058, 0.0333876, 0.696732),
    vec3(0.0333775, 0.0333593, 0.696648),
    vec3(0.033349, 0.0333309, 0.696563),
    vec3(0.0333204, 0.0333023, 0.696477),
    vec3(0.0332917, 0.0332736, 0.696391),
    vec3(0.0332629, 0.0332448, 0.696304),
    vec3(0.0332339, 0.0332158, 0.696216),
    vec3(0.0332047, 0.0331867, 0.696128),
    vec3(0.0331755, 0.0331574, 0.69604),
    vec3(0.033146, 0.033128, 0.695951),
    vec3(0.0331165, 0.0330984, 0.695861),
    vec3(0.0330868, 0.0330687, 0.695771),
    vec3(0.0330569, 0.0330389, 0.695681),
    vec3(0.0330269, 0.0330089, 0.695589),
    vec3(0.0329967, 0.0329787, 0.695498),
    vec3(0.0329664, 0.0329484, 0.695406),
    vec3(0.032936, 0.032918, 0.695314),
    vec3(0.0329054, 0.0328874, 0.695221),
    vec3(0.0328746, 0.0328567, 0.695128),
    vec3(0.0328437, 0.0328258, 0.695034),
    vec3(0.0328127, 0.0327948, 0.694941),
    vec3(0.0327815, 0.0327637, 0.694847),
    vec3(0.0327503, 0.0327324, 0.694753),
    vec3(0.0327189, 0.032701, 0.694658),
    vec3(0.0326873, 0.0326695, 0.694564),
    vec3(0.0326557, 0.0326379, 0.694469),
    vec3(0.032624, 0.0326062, 0.694374),
    vec3(0.0325921, 0.0325744, 0.69428),
    vec3(0.0325602, 0.0325424, 0.694185),
    vec3(0.0325282, 0.0325104, 0.694091)
);

const vec3 mist[441] = vec3[441](
    vec3(0.0315479, 0.0315307, 0.665761),
    vec3(0.0316514, 0.0316342, 0.664818),
    vec3(0.0317602, 0.0317429, 0.663602),
    vec3(0.0318819, 0.0318645, 0.66187),
    vec3(0.0320072, 0.0319898, 0.659542),
    vec3(0.0321027, 0.0320852, 0.656933),
    vec3(0.0321259, 0.0321084, 0.654769),
    vec3(0.0320656, 0.0320481, 0.653612),
    vec3(0.0319481, 0.0319307, 0.65344),
    vec3(0.0318071, 0.0317898, 0.653925),
    vec3(0.0316661, 0.0316488, 0.654756),
    vec3(0.0315395, 0.0315223, 0.655706),
    vec3(0.0314331, 0.031416, 0.656666),
    vec3(0.0313502, 0.0313331, 0.657554),
    vec3(0.031292, 0.0312749, 0.658314),
    vec3(0.0312581, 0.031241, 0.658905),
    vec3(0.0312461, 0.0312291, 0.659303),
    vec3(0.0312521, 0.031235, 0.659508),
    vec3(0.0312704, 0.0312533, 0.659543),
    vec3(0.031295, 0.031278, 0.659453),
    vec3(0.0313215, 0.0313044, 0.65929),
    vec3(0.0313481, 0.031331, 0.659084),
    vec3(0.0313765, 0.0313594, 0.658822),
    vec3(0.0314102, 0.031393, 0.658451),
    vec3(0.0314518, 0.0314347, 0.657897),
    vec3(0.0315008, 0.0314836, 0.657104),
    vec3(0.0315502, 0.031533, 0.656102),
    vec3(0.0315874, 0.0315702, 0.655045),
    vec3(0.0316019, 0.0315847, 0.654154),
    vec3(0.0315926, 0.0315754, 0.653567),
    vec3(0.0315653, 0.0315481, 0.653288),
    vec3(0.0315277, 0.0315106, 0.653257),
    vec3(0.0314862, 0.031469, 0.653402),
    vec3(0.0314452, 0.0314281, 0.653664),
    vec3(0.0314082, 0.0313911, 0.653992),
    vec3(0.0313774, 0.0313603, 0.654349),
    vec3(0.0313544, 0.0313373, 0.654704),
    vec3(0.0313399, 0.0313228, 0.655034),
    vec3(0.0313341, 0.0313171, 0.655318),
    vec3(0.0313367, 0.0313197, 0.655544),
    vec3(0.0313465, 0.0313295, 0.655703),
    vec3(0.031362, 0.0313449, 0.655797),
    vec3(0.0313813, 0.0313641, 0.655834),
    vec3(0.0314027, 0.0313856, 0.655824),
    vec3(0.0314256, 0.0314085, 0.655775),
    vec3(0.0314498, 0.0314326, 0.655689),
    vec3(0.0314761, 0.0314589, 0.655553),
    vec3(0.0315054, 0.0314882, 0.655345),
    vec3(0.0315379, 0.0315207, 0.655042),
    vec3(0.031572, 0.0315548, 0.654636),
    vec3(0.0316042, 0.031587, 0.654151),
    vec3(0.0316294, 0.0316122, 0.653653),
    vec3(0.0316439, 0.0316266, 0.653228),
    vec3(0.031647, 0.0316298, 0.65294),
    vec3(0.0316414, 0.0316242, 0.652799),
    vec3(0.0316304, 0.0316131, 0.652786),
    vec3(0.0316165, 0.0315993, 0.652874),
    vec3(0.031602, 0.0315847, 0.653043),
    vec3(0.0315885, 0.0315713, 0.653271),
    vec3(0.0315776, 0.0315604, 0.653536),
    vec3(0.0315702, 0.031553, 0.653821),
    vec3(0.0315669, 0.0315497, 0.654114),
    vec3(0.031568, 0.0315508, 0.654405),
    vec3(0.031574, 0.0315568, 0.654683),
    vec3(0.0315847, 0.0315675, 0.654939),
    vec3(0.0315998, 0.0315826, 0.655166),
    vec3(0.0316188, 0.0316016, 0.655361),
    vec3(0.0316411, 0.0316239, 0.655523),
    vec3(0.031666, 0.0316487, 0.655653),
    vec3(0.0316929, 0.0316756, 0.655752),
    vec3(0.0317214, 0.0317041, 0.65582),
    vec3(0.0317514, 0.0317341, 0.655858),
    vec3(0.0317828, 0.0317655, 0.655861),
    vec3(0.0318159, 0.0317985, 0.655825),
    vec3(0.0318504, 0.0318331, 0.655742),
    vec3(0.031886, 0.0318686, 0.655608),
    vec3(0.0319212, 0.0319038, 0.655425),
    vec3(0.0319542, 0.0319368, 0.655212),
    vec3(0.0319827, 0.0319653, 0.654998),
    vec3(0.0320049, 0.0319875, 0.654823),
    vec3(0.0320206, 0.0320032, 0.654722),
    vec3(0.0320309, 0.0320135, 0.654708),
    vec3(0.032038, 0.0320205, 0.654775),
    vec3(0.0320436, 0.0320261, 0.654905),
    vec3(0.0320488, 0.0320313, 0.655083),
    vec3(0.0320542, 0.0320367, 0.655298),
    vec3(0.0320602, 0.0320427, 0.655548),
    vec3(0.0320674, 0.0320499, 0.655828),
    vec3(0.0320766, 0.0320591, 0.65613),
    vec3(0.0320884, 0.0320709, 0.656444),
    vec3(0.0321031, 0.0320856, 0.65676),
    vec3(0.0321208, 0.0321033, 0.657071),
    vec3(0.0321412, 0.0321236, 0.657373),
    vec3(0.0321641, 0.0321466, 0.657665),
    vec3(0.0321895, 0.0321719, 0.657946),
    vec3(0.0322172, 0.0321997, 0.658211),
    vec3(0.0322473, 0.0322297, 0.65846),
    vec3(0.0322793, 0.0322618, 0.658687),
    vec3(0.0323132, 0.0322956, 0.658891),
    vec3(0.0323484, 0.0323308, 0.65907),
    vec3(0.0323848, 0.0323671, 0.659224),
    vec3(0.032422, 0.0324044, 0.659352),
    vec3(0.0324602, 0.0324425, 0.659456),
    vec3(0.032499, 0.0324813, 0.659531),
    vec3(0.0325386, 0.0325208, 0.659578),
    vec3(0.0325783, 0.0325606, 0.659595),
    vec3(0.0326178, 0.0326, 0.659583),
    vec3(0.0326558, 0.032638, 0.659548),
    vec3(0.0326915, 0.0326737, 0.659503),
    vec3(0.0327237, 0.0327059, 0.659463),
    vec3(0.0327518, 0.032734, 0.659448),
    vec3(0.0327759, 0.0327581, 0.659474),
    vec3(0.0327967, 0.0327788, 0.65955),
    vec3(0.0328152, 0.0327973, 0.659677),
    vec3(0.0328328, 0.0328149, 0.659848),
    vec3(0.0328504, 0.0328325, 0.660054),
    vec3(0.0328686, 0.0328507, 0.660283),
    vec3(0.0328877, 0.0328698, 0.660528),
    vec3(0.0329076, 0.0328896, 0.660785),
    vec3(0.0329281, 0.0329102, 0.661055),
    vec3(0.0329494, 0.0329315, 0.661339),
    vec3(0.0329717, 0.0329538, 0.661636),
    vec3(0.0329953, 0.0329773, 0.661944),
    vec3(0.0330206, 0.0330026, 0.662259),
    vec3(0.0330478, 0.0330298, 0.662577),
    vec3(0.033077, 0.033059, 0.662891),
    vec3(0.0331082, 0.0330901, 0.663197),
    vec3(0.0331411, 0.033123, 0.663493),
    vec3(0.0331754, 0.0331573, 0.663776),
    vec3(0.0332109, 0.0331928, 0.664046),
    vec3(0.0332474, 0.0332293, 0.664304),
    vec3(0.0332847, 0.0332666, 0.66455),
    vec3(0.0333229, 0.0333047, 0.664784),
    vec3(0.0333618, 0.0333436, 0.665005),
    vec3(0.0334015, 0.0333833, 0.66521),
    vec3(0.033442, 0.0334238, 0.665398),
    vec3(0.0334831, 0.0334648, 0.665566),
    vec3(0.0335246, 0.0335064, 0.665713),
    vec3(0.0335664, 0.0335481, 0.665838),
    vec3(0.0336079, 0.0335896, 0.66594),
    vec3(0.0336488, 0.0336305, 0.666022),
    vec3(0.0336887, 0.0336704, 0.666087),
    vec3(0.033727, 0.0337086, 0.666139),
    vec3(0.0337633, 0.0337449, 0.666186),
    vec3(0.0337971, 0.0337787, 0.666236),
    vec3(0.0338284, 0.03381, 0.666296),
    vec3(0.0338571, 0.0338387, 0.666374),
    vec3(0.0338836, 0.0338651, 0.666477),
    vec3(0.0339082, 0.0338897, 0.666607),
    vec3(0.0339316, 0.0339131, 0.666765),
    vec3(0.0339545, 0.033936, 0.666947),
    vec3(0.0339775, 0.0339589, 0.667149),
    vec3(0.0340008, 0.0339823, 0.667366),
    vec3(0.0340248, 0.0340062, 0.667592),
    vec3(0.0340494, 0.0340309, 0.667824),
    vec3(0.0340747, 0.0340561, 0.668058),
    vec3(0.0341005, 0.0340819, 0.668295),
    vec3(0.0341266, 0.034108, 0.668535),
    vec3(0.0341531, 0.0341345, 0.668778),
    vec3(0.03418, 0.0341614, 0.669026),
    vec3(0.0342072, 0.0341885, 0.669274),
    vec3(0.0342339, 0.0342152, 0.669496),
    vec3(0.0342613, 0.0342426, 0.669717),
    vec3(0.0342897, 0.034271, 0.66994),
    vec3(0.0343193, 0.0343006, 0.670163),
    vec3(0.03435, 0.0343313, 0.670384),
    vec3(0.034382, 0.0343633, 0.670599),
    vec3(0.0344151, 0.0343964, 0.670805),
    vec3(0.0344491, 0.0344304, 0.671001),
    vec3(0.0344839, 0.0344651, 0.671186),
    vec3(0.0345192, 0.0345004, 0.671358),
    vec3(0.0345548, 0.034536, 0.671518),
    vec3(0.0345906, 0.0345717, 0.671666),
    vec3(0.0346263, 0.0346074, 0.671803),
    vec3(0.034662, 0.0346431, 0.671928),
    vec3(0.0346975, 0.0346786, 0.672044),
    vec3(0.0347328, 0.0347139, 0.67215),
    vec3(0.0347679, 0.0347489, 0.672246),
    vec3(0.0348027, 0.0347837, 0.672333),
    vec3(0.0348371, 0.0348182, 0.672411),
    vec3(0.0348711, 0.0348521, 0.672479),
    vec3(0.0349045, 0.0348855, 0.672539),
    vec3(0.034937, 0.034918, 0.672591),
    vec3(0.0349685, 0.0349494, 0.672637),
    vec3(0.0349987, 0.0349796, 0.672679),
    vec3(0.0350275, 0.0350084, 0.672724),
    vec3(0.0350557, 0.0350366, 0.672801),
    vec3(0.0350822, 0.0350631, 0.672887),
    vec3(0.0351071, 0.0350879, 0.672983),
    vec3(0.0351303, 0.0351111, 0.673089),
    vec3(0.0351521, 0.035133, 0.673209),
    vec3(0.0351729, 0.0351538, 0.673343),
    vec3(0.035193, 0.0351739, 0.673491),
    vec3(0.0352128, 0.0351936, 0.673652),
    vec3(0.0352325, 0.0352133, 0.673825),
    vec3(0.0352524, 0.0352332, 0.674006),
    vec3(0.0352727, 0.0352535, 0.674194),
    vec3(0.0352936, 0.0352744, 0.674387),
    vec3(0.035315, 0.0352958, 0.674582),
    vec3(0.035337, 0.0353177, 0.674778),
    vec3(0.0353594, 0.0353402, 0.674973),
    vec3(0.0353823, 0.035363, 0.675166),
    vec3(0.0354055, 0.0353862, 0.675358),
    vec3(0.0354289, 0.0354095, 0.675549),
    vec3(0.0354524, 0.0354331, 0.675738),
    vec3(0.0354761, 0.0354567, 0.675926),
    vec3(0.0354999, 0.0354805, 0.676113),
    vec3(0.0355239, 0.0355045, 0.6763),
    vec3(0.035548, 0.0355287, 0.676486),
    vec3(0.0355725, 0.0355531, 0.676672),
    vec3(0.0355971, 0.0355777, 0.676851),
    vec3(0.0356213, 0.0356018, 0.677),
    vec3(0.0356457, 0.0356263, 0.677141),
    vec3(0.0356706, 0.0356511, 0.677279),
    vec3(0.0356959, 0.0356765, 0.677411),
    vec3(0.0357217, 0.0357022, 0.677538),
    vec3(0.0357478, 0.0357283, 0.677659),
    vec3(0.0357742, 0.0357547, 0.677771),
    vec3(0.0358008, 0.0357813, 0.677876),
    vec3(0.0358275, 0.035808, 0.677972),
    vec3(0.0358542, 0.0358347, 0.678059),
    vec3(0.0358808, 0.0358612, 0.678137),
    vec3(0.035907, 0.0358875, 0.678205),
    vec3(0.0359329, 0.0359134, 0.678266),
    vec3(0.0359584, 0.0359388, 0.678317),
    vec3(0.0359832, 0.0359636, 0.678361),
    vec3(0.0360074, 0.0359877, 0.678398),
    vec3(0.0360307, 0.0360111, 0.678429),
    vec3(0.0360533, 0.0360336, 0.678454),
    vec3(0.0360749, 0.0360552, 0.678475),
    vec3(0.0360955, 0.0360758, 0.678492),
    vec3(0.0361151, 0.0360954, 0.678508),
    vec3(0.0361336, 0.0361139, 0.678522),
    vec3(0.036151, 0.0361313, 0.678537),
    vec3(0.0361673, 0.0361476, 0.678554),
    vec3(0.0361827, 0.0361629, 0.678578),
    vec3(0.0361975, 0.0361778, 0.678633),
    vec3(0.0362115, 0.0361918, 0.678697),
    vec3(0.0362247, 0.0362049, 0.678767),
    vec3(0.0362371, 0.0362173, 0.678844),
    vec3(0.0362489, 0.0362291, 0.678927),
    vec3(0.0362602, 0.0362405, 0.679017),
    vec3(0.0362713, 0.0362515, 0.679114),
    vec3(0.0362821, 0.0362624, 0.679217),
    vec3(0.0362929, 0.0362731, 0.679325),
    vec3(0.0363037, 0.036284, 0.679438),
    vec3(0.0363147, 0.0362949, 0.679554),
    vec3(0.0363257, 0.0363059, 0.679673),
    vec3(0.0363369, 0.0363171, 0.679794),
    vec3(0.0363483, 0.0363285, 0.679915),
    vec3(0.0363598, 0.03634, 0.680037),
    vec3(0.0363715, 0.0363517, 0.680159),
    vec3(0.0363833, 0.0363634, 0.680281),
    vec3(0.0363951, 0.0363753, 0.680401),
    vec3(0.036407, 0.0363871, 0.68052),
    vec3(0.0364189, 0.036399, 0.680639),
    vec3(0.0364307, 0.0364108, 0.680756),
    vec3(0.0364425, 0.0364226, 0.680872),
    vec3(0.0364542, 0.0364343, 0.680987),
    vec3(0.0364659, 0.036446, 0.681101),
    vec3(0.0364775, 0.0364576, 0.68121),
    vec3(0.0364888, 0.0364689, 0.681293),
    vec3(0.0365001, 0.0364802, 0.681371),
    vec3(0.0365114, 0.0364915, 0.681449),
    vec3(0.0365228, 0.0365029, 0.681525),
    vec3(0.0365343, 0.0365144, 0.681601),
    vec3(0.0365459, 0.036526, 0.681675),
    vec3(0.0365577, 0.0365378, 0.681747),
    vec3(0.0365696, 0.0365496, 0.681816),
    vec3(0.0365816, 0.0365616, 0.681883),
    vec3(0.0365937, 0.0365737, 0.681947),
    vec3(0.0366059, 0.0365859, 0.682006),
    vec3(0.0366181, 0.0365982, 0.682061),
    vec3(0.0366304, 0.0366104, 0.682112),
    vec3(0.0366426, 0.0366226, 0.682157),
    vec3(0.0366547, 0.0366347, 0.682196),
    vec3(0.0366666, 0.0366466, 0.68223),
    vec3(0.0366782, 0.0366583, 0.682258),
    vec3(0.0366896, 0.0366696, 0.68228),
    vec3(0.0367005, 0.0366805, 0.682295),
    vec3(0.036711, 0.036691, 0.682305),
    vec3(0.0367209, 0.0367009, 0.682309),
    vec3(0.0367302, 0.0367102, 0.682308),
    vec3(0.0367388, 0.0367188, 0.682302),
    vec3(0.0367467, 0.0367267, 0.682291),
    vec3(0.0367538, 0.0367338, 0.682276),
    vec3(0.0367601, 0.0367401, 0.682258),
    vec3(0.0367656, 0.0367455, 0.682238),
    vec3(0.0367702, 0.0367501, 0.682215),
    vec3(0.0367739, 0.0367539, 0.682192),
    vec3(0.0367768, 0.0367568, 0.682168),
    vec3(0.036779, 0.0367589, 0.682144),
    vec3(0.0367803, 0.0367602, 0.682122),
    vec3(0.0367809, 0.0367609, 0.682101),
    vec3(0.0367809, 0.0367608, 0.682083),
    vec3(0.0367803, 0.0367602, 0.682068),
    vec3(0.0367792, 0.0367591, 0.682056),
    vec3(0.0367776, 0.0367576, 0.682049),
    vec3(0.0367757, 0.0367557, 0.682045),
    vec3(0.0367736, 0.0367536, 0.682045),
    vec3(0.0367713, 0.0367513, 0.682049),
    vec3(0.0367689, 0.0367489, 0.682057),
    vec3(0.0367665, 0.0367464, 0.682069),
    vec3(0.036764, 0.036744, 0.682084),
    vec3(0.0367617, 0.0367417, 0.682102),
    vec3(0.0367595, 0.0367394, 0.682123),
    vec3(0.0367574, 0.0367373, 0.682146),
    vec3(0.0367554, 0.0367354, 0.68217),
    vec3(0.0367536, 0.0367336, 0.682195),
    vec3(0.0367519, 0.0367319, 0.682221),
    vec3(0.0367503, 0.0367302, 0.682251),
    vec3(0.0367483, 0.0367283, 0.682302),
    vec3(0.0367463, 0.0367262, 0.682356),
    vec3(0.0367442, 0.0367242, 0.682408),
    vec3(0.0367421, 0.0367221, 0.682459),
    vec3(0.03674, 0.0367199, 0.682508),
    vec3(0.0367377, 0.0367176, 0.682555),
    vec3(0.0367352, 0.0367152, 0.682601),
    vec3(0.0367325, 0.0367125, 0.682644),
    vec3(0.0367296, 0.0367096, 0.682685),
    vec3(0.0367265, 0.0367065, 0.682724),
    vec3(0.0367231, 0.0367031, 0.682762),
    vec3(0.0367194, 0.0366994, 0.682798),
    vec3(0.0367155, 0.0366955, 0.682832),
    vec3(0.0367113, 0.0366912, 0.682865),
    vec3(0.0367068, 0.0366868, 0.682898),
    vec3(0.0367021, 0.036682, 0.682929),
    vec3(0.0366971, 0.0366771, 0.68296),
    vec3(0.036692, 0.0366719, 0.68299),
    vec3(0.0366866, 0.0366666, 0.68302),
    vec3(0.0366812, 0.0366612, 0.68305),
    vec3(0.0366756, 0.0366556, 0.683079),
    vec3(0.0366699, 0.0366499, 0.683108),
    vec3(0.0366642, 0.0366442, 0.683138),
    vec3(0.0366584, 0.0366384, 0.683167),
    vec3(0.0366528, 0.0366328, 0.683192),
    vec3(0.0366479, 0.0366279, 0.683197),
    vec3(0.0366432, 0.0366232, 0.683197),
    vec3(0.0366385, 0.0366185, 0.683198),
    vec3(0.0366339, 0.0366139, 0.683197),
    vec3(0.0366293, 0.0366093, 0.683196),
    vec3(0.0366246, 0.0366047, 0.683193),
    vec3(0.03662, 0.0366, 0.683189),
    vec3(0.0366154, 0.0365954, 0.683183),
    vec3(0.0366106, 0.0365906, 0.683175),
    vec3(0.0366058, 0.0365858, 0.683165),
    vec3(0.0366008, 0.0365808, 0.683152),
    vec3(0.0365957, 0.0365757, 0.683137),
    vec3(0.0365903, 0.0365703, 0.68312),
    vec3(0.0365846, 0.0365646, 0.683099),
    vec3(0.0365786, 0.0365587, 0.683076),
    vec3(0.0365723, 0.0365523, 0.68305),
    vec3(0.0365655, 0.0365455, 0.683021),
    vec3(0.0365583, 0.0365383, 0.682989),
    vec3(0.0365506, 0.0365306, 0.682954),
    vec3(0.0365423, 0.0365224, 0.682916),
    vec3(0.0365335, 0.0365136, 0.682875),
    vec3(0.0365241, 0.0365042, 0.682833),
    vec3(0.0365141, 0.0364942, 0.682788),
    vec3(0.0365035, 0.0364836, 0.682741),
    vec3(0.0364923, 0.0364724, 0.682692),
    vec3(0.0364805, 0.0364605, 0.682642),
    vec3(0.036468, 0.0364481, 0.68259),
    vec3(0.0364549, 0.036435, 0.682538),
    vec3(0.0364413, 0.0364214, 0.682486),
    vec3(0.0364271, 0.0364072, 0.682433),
    vec3(0.0364124, 0.0363925, 0.68238),
    vec3(0.0363973, 0.0363774, 0.682328),
    vec3(0.0363817, 0.0363618, 0.682276),
    vec3(0.0363657, 0.0363458, 0.682225),
    vec3(0.0363493, 0.0363295, 0.682175),
    vec3(0.0363327, 0.0363129, 0.682127),
    vec3(0.0363159, 0.036296, 0.68208),
    vec3(0.0362988, 0.036279, 0.682035),
    vec3(0.0362817, 0.0362618, 0.681991),
    vec3(0.0362644, 0.0362446, 0.681949),
    vec3(0.0362471, 0.0362273, 0.681909),
    vec3(0.0362298, 0.03621, 0.681871),
    vec3(0.0362125, 0.0361927, 0.681835),
    vec3(0.0361952, 0.0361755, 0.6818),
    vec3(0.0361781, 0.0361584, 0.681767),
    vec3(0.0361611, 0.0361414, 0.681736),
    vec3(0.0361442, 0.0361245, 0.681706),
    vec3(0.0361275, 0.0361078, 0.681677),
    vec3(0.036111, 0.0360912, 0.68165),
    vec3(0.0360943, 0.0360746, 0.681626),
    vec3(0.0360765, 0.0360568, 0.681622),
    vec3(0.0360585, 0.0360388, 0.68162),
    vec3(0.0360406, 0.036021, 0.681619),
    vec3(0.0360229, 0.0360033, 0.681619),
    vec3(0.0360053, 0.0359857, 0.681618),
    vec3(0.0359879, 0.0359682, 0.681617),
    vec3(0.0359705, 0.0359508, 0.681616),
    vec3(0.0359531, 0.0359335, 0.681614),
    vec3(0.0359358, 0.0359162, 0.681612),
    vec3(0.0359185, 0.0358989, 0.681609),
    vec3(0.0359012, 0.0358816, 0.681605),
    vec3(0.0358839, 0.0358643, 0.6816),
    vec3(0.0358665, 0.0358469, 0.681595),
    vec3(0.035849, 0.0358294, 0.681588),
    vec3(0.0358315, 0.0358119, 0.68158),
    vec3(0.0358138, 0.0357942, 0.681571),
    vec3(0.035796, 0.0357764, 0.681561),
    vec3(0.035778, 0.0357585, 0.681549),
    vec3(0.0357599, 0.0357403, 0.681537),
    vec3(0.0357415, 0.035722, 0.681523),
    vec3(0.035723, 0.0357035, 0.681508),
    vec3(0.0357043, 0.0356848, 0.681491),
    vec3(0.0356854, 0.0356659, 0.681474),
    vec3(0.0356663, 0.0356468, 0.681455),
    vec3(0.0356472, 0.0356277, 0.681433),
    vec3(0.0356296, 0.0356102, 0.681393),
    vec3(0.0356122, 0.0355927, 0.681349),
    vec3(0.0355945, 0.0355751, 0.681305),
    vec3(0.0355767, 0.0355572, 0.68126),
    vec3(0.0355586, 0.0355392, 0.681213),
    vec3(0.0355404, 0.035521, 0.681166),
    vec3(0.035522, 0.0355026, 0.681119),
    vec3(0.0355035, 0.0354841, 0.68107),
    vec3(0.0354847, 0.0354653, 0.681021),
    vec3(0.0354658, 0.0354464, 0.680971),
    vec3(0.0354467, 0.0354274, 0.68092),
    vec3(0.0354275, 0.0354081, 0.680869),
    vec3(0.0354081, 0.0353887, 0.680817),
    vec3(0.0353885, 0.0353692, 0.680764),
    vec3(0.0353687, 0.0353494, 0.680711),
    vec3(0.0353488, 0.0353295, 0.680656),
    vec3(0.0353288, 0.0353095, 0.680601),
    vec3(0.0353086, 0.0352893, 0.680545),
    vec3(0.0352882, 0.0352689, 0.680489),
    vec3(0.0352676, 0.0352483, 0.680431),
    vec3(0.0352469, 0.0352276, 0.680373),
    vec3(0.0352259, 0.0352067, 0.680314),
    vec3(0.0352049, 0.0351856, 0.680255),
    vec3(0.0351836, 0.0351644, 0.680194),
    vec3(0.0351621, 0.0351429, 0.680133),
    vec3(0.0351404, 0.0351212, 0.68007),
    vec3(0.0351186, 0.0350994, 0.680007),
    vec3(0.0350965, 0.0350773, 0.679944),
    vec3(0.0350742, 0.035055, 0.679879),
    vec3(0.0350517, 0.0350325, 0.679814)
);

float ozonefunc (float wl) {
    return clamp(wl, 390.0, 830.0) == wl ? ozoneCrossSection[int(wl - 390.0)] * ozoneNumberDensity * ozoneUnitConversion : 0.0;
}

vec3 mistfunc (float wl) {
    return clamp(wl, 390.0, 830.0) == wl ? mist[int(wl - 390.0)] : vec3(0.0);
}

float sunrad = 6.963e8 / 1.496e11;
//float sunrad = radians(1.0);
float moonrad = 1.737e6 / 3.844e8;

float planetrad = 6371e3;
float atmoheight = 110e3;

float atmorad = planetrad + atmoheight;
float atmolowerlim = planetrad;

float plancks (float wl, float temp) {
    const float h = 6.62607015e-16;
    const float c = 2.99792458e17;
    const float k = 1.380649e-5;

    float p1 = 2.0 * h * pow(c, 2.0) * pow(wl, -5.0);
    float p2 = exp((h * c) / (wl * k * temp)) - 1.0;

    return p1 / p2;
}

vec2 traceatmo (vec3 ro, vec3 rd) {
    vec2 atmo = RSI(ro, rd, vec4(vec3(0.0), atmorad));
    vec2 plan = RSI(ro, rd, vec4(vec3(0.0), atmolowerlim));

    bool atmoi = atmo.y >= 0.0;
    bool plani = plan.x >= 0.0;

    return vec2((plani && plan.x < 0.0) ? plan.y : max(atmo.x, 0.0), (plani && plan.x > 0.0) ? plan.x : atmo.y);
}

vec2 traceatmo (vec3 ro, vec3 rd, out bool plani) {
    vec2 atmo = RSI(ro, rd, vec4(vec3(0.0), atmorad));
    vec2 plan = RSI(ro, rd, vec4(vec3(0.0), atmolowerlim));

    bool atmoi = atmo.y >= 0.0;
    plani = plan.x >= 0.0;

    return vec2((plani && plan.x < 0.0) ? plan.y : max(atmo.x, 0.0), (plani && plan.x > 0.0) ? plan.x : atmo.y);
}

float raydens (in float h) {
    float N2mass = N_N2 * 0.028;
    float O2mass = N_O2 * 0.032;
    float CO2mass = N_CO2 * 0.044;

    float mass = (N2mass + O2mass + CO2mass) / (N_N2 + N_O2 + N_CO2);

    return 1.225 * exp(-h / 8.4);
}

//From Jessie

float S (in float x) {
    return 10.0 * pow(x, 3.0) - 15.0 * pow(x, 4.0) + 6.0 * pow(x, 5.0);
}
float E (in float h) {
    return exp(-h / 40000.0) * S(min(max((h - (2000.0 + 500.0 / 2.0)) / ((2000.0 - 500.0 / 2.0) - (2000.0 + 500.0 / 2.0)), 0.0), 1.0));
}

float miedens (in float h) {
    return ((h < 11000.0 ? exp(-h / 80000.0) : exp(-11000.0 / 80000.0) * exp(-(h - 11000.0) / 2000.0)) + E(h) * ((0.166 * TURBIDITY - 0.164) * 1000.0)) / 2.0;
}

float ozonedens (in float h) {
    float o1 = 25.0 *     exp(( 0.0 - h) /   8.0) * 0.5;
    float o2 = 30.0 * pow(exp((18.0 - h) /  80.0), h - 18.0);
    float o3 = 75.0 * pow(exp((25.3 - h) /  35.0), h - 25.3);
    float o4 = 50.0 * pow(exp((30.0 - h) / 150.0), h - 30.0);
    return (o1 + o2 + o3 + o4) / 134.628 * OZONE_STRENGTH;
}

float mistdens(float h) {
    return 0.001 * 0.5 * pow(HUMIDITY, 1.5) * exp(-max(h - 64.0, 0.0) / 2000.0);
}

float temp = 35.0;

float Ps = 611.2 * exp(17.62 * temp / (243.12 + temp));
float Pv = HUMIDITY * Ps;

float P (float h) {
    float exponent = (9.81 * 0.029) / (8.314 * 0.0065);
    return 101325.0 * pow(max(288.15 - 0.0065 * h, 200.0) / 288.15, exponent);
}

vec4 dens (float height) {
    height = max(height, planetrad) - planetrad;

    float pdry = (101325.0 - Pv) / (287.05 * (temp + 273.15));
    float phumid = (101325.0 - Pv) / (287.05 * (temp + 273.15)) + Pv / (461.495 * (temp + 273.15));

    float scale = 1.0 - (pdry - phumid) / pdry;

    float ray = raydens(height / 1000.0) * scale;
    float mie = miedens(height) * scale;

    float mist = mistdens(height);

    float ozone = ozonedens(height / 1000.0);

    return vec4(ray, mie, ozone, mist);
}

vec4 peakDens (vec3 p, vec3 rd) {
    vec3 norm = normalize(p);

    float peakRay = 0.0;
    float peakMie = 0.0;
    float peakMist = 0.0;

    if (dot(norm, rd) > 0.0) {
        peakRay = (length(p) - planetrad) / 1000.0;
        peakMie = (length(p) - planetrad) / 1000.0;
        peakMist = (length(p) - planetrad);
    }

    float peakOzo = 25.0;
    
    return vec4(raydens(peakRay), miedens(peakMie), ozonedens(peakOzo), mistdens(peakMist));
}

bool deltaTrackingEstimator(inout vec3 position, vec3 direction, vec4 attenuationCoefficients, out int particle) {
    vec2 dists = traceatmo(position, direction);
    if(dists.y < 0.0) return false;

    vec4 maxAttenuation = attenuationCoefficients * peakDens(position, direction);
    float attenuationMajorant = max(maxAttenuation.x + maxAttenuation.y + maxAttenuation.z + maxAttenuation.w, 0.0);

    float t = 0.0;

    while(t < dists.y) {
        float stepSize = -log(randF()) / attenuationMajorant;

        t += stepSize;
        position += direction * stepSize;

        float centerDist = length(position);

        if(centerDist < atmolowerlim) return false;
        if(centerDist > atmorad) break;

        vec4 attenuation = attenuationCoefficients * dens(centerDist);

        float rng = randF();

        if(rng < (attenuation.x + attenuation.y + attenuation.z + attenuation.w) / attenuationMajorant) {
            float fraction = 0.0;
            particle = 0;
            while(particle < 3) {
                fraction += attenuation[particle];
                if(rng * attenuationMajorant < fraction) break;
                particle++;
            }
            return true;
        }

        maxAttenuation = attenuationCoefficients * peakDens(position, direction);
        attenuationMajorant = max(dot(maxAttenuation, vec4(1.0)), 0.0);
    }
    return false;
}

float ratioTrackingEstimator (in vec3 position, vec3 direction, vec4 attenuationCoefficients) {
    vec2 dists = traceatmo(position, direction);
    if(dists.y < 0.0) return 0.0;

    vec4 maxAttenuation = attenuationCoefficients * peakDens(position, direction);
    float attenuationMajorant = max(dot(maxAttenuation, vec4(1.0)), 0.0);

    float t = 0.0;
    float transmittance = 1.0;

    while(t < dists.y) {
        float stepSize = -log(randF()) / attenuationMajorant;

        t += stepSize;
        position += direction * stepSize;

        float centerDist = length(position);

        if(centerDist < atmolowerlim) return 0.0;
        if(centerDist > atmorad) break;

        vec4 attenuation = attenuationCoefficients * dens(centerDist);
        transmittance *= 1.0 - dot(attenuation, vec4(1.0)) / attenuationMajorant;

        maxAttenuation = attenuationCoefficients * peakDens(position, direction);
        attenuationMajorant = max(dot(maxAttenuation, vec4(1.0)), 0.0);
    }
    return transmittance;
}

float skypt (vec3 ro, vec3 rd, vec3 lrd, float intens, float col, float wl) {
    bool plani;
    vec2 dists = traceatmo(ro, rd, plani);
    if (dists.y < 0.0) return 0.0;

    vec3 p = ro + rd * dists.x;

    float moonintens = intens * 2.0 * pi * (1.0 - cos(moonrad));

    float scatterray = BetaR(wl);
    float scattermie = BetaM(wl, aerosol);
    float absorbo = ozonefunc(wl);
    float scattermist = mistfunc(wl).r;
    vec4 coeff = vec4(scatterray, scattermie, absorbo, scattermist);

    float trans = ratioTrackingEstimator(ro, rd, coeff) * (!plani ? 1.0 : 0.0);

    float through = 1.0;
    float ret = 0.0;

    int scatter = 0;
    int particle;

    while (scatter < SCATTER_EVENTS) {
        vec3 oldp = p;
        bool interact = deltaTrackingEstimator(p, rd, coeff, particle);

        if (interact) {
            bool canScatter = false;

            vec3 newDir = randV();

            float phaseScatter = 1.0;
            float phaseSun = 1.0;
            float phaseMoon = 1.0;

            switch (particle) {
                case 0:
                    canScatter = true;

                    newDir = sampleRayleigh(rd);

                    //phaseScatter = rayleigh(dot(rd, newDir)) * 4.0 * pi;
                    phaseScatter = 1.0;
                    phaseSun = rayleigh(dot(rd, lrd)) * 4.0 * pi;
                    phaseMoon = rayleigh(-dot(rd, lrd)) * 4.0 * pi;

                    break;
                case 1:
                    canScatter = randF() < MIE_SCATTERING_ALBEDO;

                    /*float g = 0.76 + 0.15 * HUMIDITY / (HUMIDITY + 0.6) - 0.2 * HUMIDITY * HUMIDITY;

                    newDir = sampleKleinNishina(rd, g);

                    //phaseScatter = kleinNishina(dot(rd, newDir), g) * 4.0 * pi;
                    phaseScatter = 1.0;
                    phaseSun = kleinNishina(dot(rd, lrd), g) * 4.0 * pi;
                    phaseMoon = kleinNishina(-dot(rd, lrd), g) * 4.0 * pi;*/

                    newDir = sampleMie(rd, aerosol);

                    //phaseScatter = kleinNishina(dot(rd, newDir), g) * 4.0 * pi;
                    phaseScatter = 1.0;
                    phaseSun = mie(dot(rd, lrd), aerosol) * 4.0 * pi;
                    phaseMoon = mie(-dot(rd, lrd), aerosol) * 4.0 * pi;

                    break;
                case 2:
                    canScatter = false;

                    break;
                case 3:
                    canScatter = true;

                    float mistg = mistfunc(wl).z;

                    newDir = sampleKleinNishina(rd, mistg);

                    //phaseScatter = kleinNishina(dot(rd, newDir), g) * 4.0 * pi;
                    phaseScatter = 1.0;
                    phaseSun = kleinNishina(dot(rd, lrd), mistg) * 4.0 * pi;
                    phaseMoon = kleinNishina(-dot(rd, lrd), mistg) * 4.0 * pi;
                    
                    break;
            }

            if (!canScatter) {
                break;
            }

            ret += through * phaseSun * intens * ratioTrackingEstimator(p, lrd, coeff);
            ret += through * phaseMoon * moonintens * ratioTrackingEstimator(p, -lrd, coeff);

            through *= phaseScatter;

            rd = newDir;

            scatter++;

            if (through < 1.0) {
                if (through < randF()) break;
                through = 1.0;
            }
        } else {
            //break;
            vec2 plan = RSI(oldp, rd, vec4(vec3(0.0), atmolowerlim));
            if (plan.x < 0.0) break;

            float alb = GROUND_ALBEDO;
            if (alb < randF()) break;

            p = oldp + rd * plan.x;

            vec3 norm = normalize(p);

            p += norm * 10.0;

            ret += through * max(dot(norm, lrd), 0.0) * 2.0 * alb * intens * ratioTrackingEstimator(p, lrd, coeff);
            ret += through * max(dot(norm, -lrd), 0.0) * 2.0 * alb * moonintens * ratioTrackingEstimator(p, -lrd, coeff);

            //through *= alb;

            rd = normalize(norm + randV());

            scatter++;
        }
    }
    if (isnan(ret) || isinf(ret)) ret = 0.0;

    return ret + col * trans;
}

float sky (vec3 ro, vec3 rd, float col, float wl) {
    ro.y += planetrad;
    
    float sunintens = plancks(wl, 5800.0);
    float sunirradiance = sunintens * 2.0 * pi * (1.0 - cos(sunrad));
    //vec3 moonirradiance = sunirradiance * 2.0 * pi * (1.0 - cos(moonrad));

    float sun = dot(rd, sunrd) > cos(sunrad) ? sunintens : col;
    sun = dot(rd, -sunrd) > cos(sunrad) ? sunirradiance : sun;
        
    float sum = 0.0;
    for (int i = 0; i < SAMPLES - min(frameCounter, 0); i++) {
        vec3 sampledsunrd = coneDir(sunrd, sunrad);
        sum += skypt(ro, rd, sampledsunrd, sunirradiance, sun, wl);
    }
    
    return sum / float(SAMPLES);
}

float sky2 (vec3 ro, vec3 rd, float col, float wl) {
    ro.y += planetrad;
    
    float sunintens = plancks(wl, 5800.0);
    float sunirradiance = sunintens * 2.0 * pi * (1.0 - cos(sunrad));
    //vec3 moonirradiance = sunirradiance * 2.0 * pi * (1.0 - cos(moonrad));

    float sun = dot(rd, sunrd) > cos(sunrad) ? sunintens : col;
        
    float sum = 0.0;
    for (int i = 0; i < SAMPLES - min(frameCounter, 0); i++) {
        vec3 sampledsunrd = coneDir(sunrd, sunrad);
        sum += skypt(ro, rd, sampledsunrd, sunirradiance, sun, wl);
    }
    
    return sum / float(SAMPLES);
}